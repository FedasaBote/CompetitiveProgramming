def kClosest(self, points, k):
        """
        :type points: List[List[int]]
        :type k: int
        :rtype: List[List[int]]
        """
        minHeap=[]
        for x,y in points:
            distance= (x**2) + (y**2)
            minHeap.append([distance,x,y])
        heapq.heapify(minHeap)
        res=[]
        while k>0:
            d,x,y=heapq.heappop(minHeap)
            res.append([x,y])
            k-=1
        return res



//////////////////////////////////////////////////////////////////////////////////
UNACCEPTED NAIVE SOLUTION BY LEETCODE
/////////////////////////////////////////////////////////////////////////////////
def kClosest(self, points: List[List[int]], k: int) -> List[List[int]]:
        distance=[]
        for i in points:
            distance.append((i[0])**2+(i[1])**2)
        for i in range(len(distance)):
            for j in range(i):
                if distance[i]<distance[j]:
                    distance[i],distance[j]= distance[j],distance[i]
                    points[i],points[j]=points[j],points[i]
        return points[:k]
