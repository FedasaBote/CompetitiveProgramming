class MyCircularQueue {
    private int[] list;
    private int size;
    private int front;
    private int rear;

    public MyCircularQueue(int k) {
        list=new int[k];
        size=0;
        front =-1;
        rear =-1; 
    }
    
    public boolean enQueue(int value) {
        if(isFull()) return false;

        if(isEmpty()) front=0;
        rear = (rear+1)%list.length;
        list[rear]=value;
        size++;
        return true;
        
    }
    
    public boolean deQueue() {
        if(isEmpty()) return false;
        if(rear==front) {
            rear=-1;
            front=-1;
        }
        else{
            front = (front + 1) %list.length;
        }
        size--;
        return true;
        
    }
    
    public int Front() {
        if (isEmpty()) {
            return -1;  
        }
        
        return list[front];  
    }
    
    public int Rear() {
        if (isEmpty()) {
            return -1;  
        }
        
        return list[rear];
    }
    
    public boolean isEmpty() {
        if(size==0) return true;
        return false;
    }
    
    public boolean isFull() {
        return size == list.length; 
    }
}

/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue obj = new MyCircularQueue(k);
 * boolean param_1 = obj.enQueue(value);
 * boolean param_2 = obj.deQueue();
 * int param_3 = obj.Front();
 * int param_4 = obj.Rear();
 * boolean param_5 = obj.isEmpty();
 * boolean param_6 = obj.isFull();
 */
